### Arrays / Lists





Array insertion O(n)



arrays/a are contiguous  : stored in memory
in order
arrangenet of elements are static 


sequancial : 
start index : 0
end index : n-1

TC of accessing elemment in array  O(1)
insertion O(n)

![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)



when the allocated memory is full





![image.png](attachment:image.png)

![image.png](attachment:image.png)

# it allocate new memory area, copy whole data and insert after swapping










# LINKED LIST

- in linked lists, nodes are not stored in contiguous in memory




![image.png](attachment:image.png)

first element stores the reference 



![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)

![image.png](attachment:image.png)





![image.png](attachment:image.png)

# example 

class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
    

head_node = Node("Sunny")
second_node = Node("Bhavya")
third_node = Node("Khushi")
fourth_node  = Node("Priyank")

print(head_node)
print(second_node)
print(third_node)
print(fourth_node) 



#  Sunny|None     Bhavya|None     Khushi|None     Priyank|None
# before linking all the next data is None . 
# lets assign linkage in next line : 

head_node.next   # initially none : headnode.next = None 

head_node.next = second_node       # linking head with secone node
second_node.next = third_node      # second node with third node
third_node.next = fourth_node      # third node wth forth node

# here, 
head_node.next 

second_node.next

third_node.next

fourth_node.next  # this will be none for now 

## LETS CHECK THE VALUES 
head_node.data

head_node.next.data

head_node.next.next.data 

head_node.next.next.next.data



third_node.next.data

second_node.next.next.data

third_node.data



#  HEAD AND TEMP MOVEMENTS

# now lets say if we assign temp variable to headNode
print(head_node.data)
temp = head_node
temp = temp.next
print(temp.data)
print(temp.next.data)
print(head_node.data)

















# example 

class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
    

first_node = Node(200)
second_node = Node(300)
third_node = Node(400)
fourth_node  = Node(500)
fifth_node = Node(600)

print(first_node)
print(second_node)
print(third_node)
print(fourth_node) 
print(fifth_node)

first_node.next = second_node
second_node.next = third_node
third_node.next = fourth_node
fourth_node.next = fifth_node

print()
print("assigning temp to first_node :")
temp = first_node
print("temp variable address: ",temp)
print("first node data (head_node) :",first_node.data)
print("third node next data :",third_node.next.data)

print()
print()
print("lets reassign temp to temp.next (next node than previously it was assigned)")
temp = temp.next
print("temp data is now:",temp.data)
print("first_node data: ",first_node.data)















# example 

class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node("a")
second = Node("b")
third = Node("c")
forth = Node("d")
fifth = Node("e")


first.next = second
second.next = third
third.next = forth
forth.next = fifth



print(first)
print(second)
print(third)
print(forth)
print(fifth)

print(first.data)

print(second.next.next.data)

temp  = first

temp

temp.data

temp.next.next.data

temp = temp.next
print(temp)
print(temp.data)
print(temp.next.next.data)

print(temp.data)























# Q : given a linked list , find the kth element

class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node(3)   # 0
second = Node(4)  # 1
third = Node(1)   # 2
forth = Node(6)   # 3
fifth = Node(9)   # 4


first.next = second
second.next = third
third.next = forth
forth.next = fifth

# above linked list is given

## way1 : not a good way   
###### if we move our head at every kth step 

##### not edge case are include

def find_kth_node(head,k):
    
    while k > 0:
        head = head.next
        k = k-1
    return head.data 

print(find_kth_node(first,0))
print(find_kth_node(first,1))
print(find_kth_node(first,2))
print(find_kth_node(first,3))
print(find_kth_node(first,4))
print()
print(find_kth_node(first,4))
print(find_kth_node(first,2))

# we can also write find kth node function with for loop 
def kthnode_for_loop(head,k):
    for i in range(0,k):
        head = head.next
    return head.data
print(kthnode_for_loop(first,2))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,3))






class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node(88654)   # 0
second = Node(654)  # 1
third = Node(5641)   # 2
forth = Node(1216)   # 3
fifth = Node(6549)   # 4


first.next = second
second.next = third
third.next = forth
forth.next = fifth

# above linked list is given

def kthnode_for_loop(head,k):
    for i in range(0,k):
        head = head.next
    return head.data
print(kthnode_for_loop(first,2))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,0))

print(kthnode_for_loop(first,4))

print(kthnode_for_loop(first,0))



## way2 : better way
###### more  generic way , if we assign a temp variable to our head and move that


class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node("Sunny")   # 0
second = Node("Priyank")  # 1
third = Node("Jeenal")   # 2
forth = Node("BHavya")   # 3
fifth = Node("Khushi")   # 4


first.next = second
second.next = third
third.next = forth
forth.next = fifth

# above linked list is given

def kthnode_for_loop(head,k):
    
    i = head
    while k > 0:
        i = i.next
        k = k-1
    return i.data 

print(kthnode_for_loop(first,0))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,3))

# edges cases : 
# what if linked list is empty:
# what if k is greater than length of linked list

def kthnode_for_loop(head,k):
    
    i = head
    while k > 0:
        i = i.next
        k = k-1
    return i.data 

print(kthnode_for_loop(first,0))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,5))


def kthnode_for_loop(head,k):  # corner case
    temp = head
    while k > 0:
        if temp.next == None:
            return None
        temp = temp.next
        k = k-1
    return temp.data 

print(kthnode_for_loop(first,0))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,5))
print(kthnode_for_loop(first,3))
print(kthnode_for_loop(first,1))

print()
print(kthnode_for_loop(first,7))
print(kthnode_for_loop(first,8))
print()
print(kthnode_for_loop(first,2))
print(kthnode_for_loop(first,1))
print()
print(kthnode_for_loop(first,7))
print(kthnode_for_loop(first,0))

        

# first = Node("Sunny")   # 0
# second = Node("Priyank")  # 1
# third = Node("Jeenal")   # 2
# forth = Node("BHavya")   # 3
# fifth = Node("Khushi")   # 4


# now what if head = None , means linked list is empty
class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node(2)   # 0








def kthnode_for_loop(head,k):  # corner case
    temp = head
    if temp == None:
        return temp.data
    while k > 0:
        if temp.next == None:
            return None
        temp = temp.next
        k = k-1
    return temp.data 

print(kthnode_for_loop(first,0))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,3))




class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node("Sunny")   # 0

# above linked list is given






# CODE

def kthnode_for_loop(head,k):  
    
    temp = head
    while k > 0 and temp != None:
        temp = temp.next
        k = k-1
    
    if temp == None:
        return None
    return temp.data 

print(kthnode_for_loop(first,0))
print(kthnode_for_loop(first,4))
print(kthnode_for_loop(first,5))
print(kthnode_for_loop(first,3))
print(kthnode_for_loop(first,1))
print(kthnode_for_loop(first,7))
print(kthnode_for_loop(first,8))
print(kthnode_for_loop(first,2))
print(kthnode_for_loop(first,1))
print(kthnode_for_loop(first,7))
print(kthnode_for_loop(first,0))



TC for checking the kth element , O(n) worst case
SC O(1)



















































# Q : insertion in a linked list

insertion at the head (first location )
insertion at the end
insertion at the kth location 





![image.png](attachment:image.png)

class Node:
    def __init__(self,value):
        self.data = value
        self.next = None
        

first = Node(1)   # 0
second= Node(2)  # 1
third = Node(3)   # 2
forth = Node(4)   # 3
fifth = Node(5)   # 4


first.next = second
second.next = third
third.next = forth
forth.next = fifth

def insert_at_beginning(first,value):                     # TC O(1), SC O(1)
    
    new_node = Node(value)                # added a new node
                              # for we need to make connection with new node to original head
    
    new_node.next = first
    first = new_node
    
insert_at_beginning(first,"-5")


kthnode_for_loop(first,0)

fifth.next.data



def insertion_at_end(head,val):            # always TC O(n), SC O(1)
    
    new_node = Node(val)
    temp = head
    
    if head == None:
        head = new_node
        return
    while temp.next != None:
        temp = temp.next
    temp.next = new_node
    return
insertion_at_end(first,"new element at last")            

fifth.next.data

![image.png](attachment:image.png)

def find_xth_node(head,x):  

    temp = head
    while x > 0 and temp != None:
        temp = temp.next
        x = x-1

    if temp == None:
        return None
    return temp.data 
    
    

def insertion_at_kth_position(head,val,k):
    
    temp = find_xth_node(head,k-1)
    
    if temp == None:
        return
    
    
    x = Node(val)
    
    
    x.next = temp.next
    temp.next = x
    
    
insertion_at_kth_position(first,"asd",3)   









class Node:
    def __init__(self, value = None, next = None):
        self.data = value
        self.next = next
        
class LinkedList:
    def __init__(self):
        self.head = None
        
    def insertion_at_beginning(self,value):
        first  = Node(value,self.head)
        self.head = first 
    
    
    def print(self):
        if self.head is None:
            print("LinkedList is empty")
            return
        
        linkliststring = ""
        
        temp = self.head
        while temp:
            linkliststring += str(temp.data) + "-->" 
            temp = temp.next
        return ((linkliststring))
    
    
    def insertion_at_end(self,value):
        if self.head is None:
            self.head = Node(value,None)
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        
        temp.next = Node(value,None)
    
    
    def insert_values(self,values_list):
        self.head = None
        for i in values_list:
            self.insertion_at_end(i)
            
        
    def get_length(self):
        count = 0
        temp = self.head
        while temp:
            count +=1
            temp = temp.next
        return count
        
    def delete_at_index(self,index):
        if index < 0 or index >= self.get_length():
            raise Exception("Invalid Index")
        
        if index == 0:
            self.head = self.head.next
            return
        count = 0
        temp = self.head
        while temp:
            if count == index - 1 :
                temp.next = temp.next.next
                break
            temp = temp.next
            count += 1
        
    def insertion_at_index(self,index,value):
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")
        if index == 0:
            self.insertion_at_beginning(value)
            return
        
        c = 0
        temp = self.head
        while temp:
            if c == index - 1:
                newval = Node(value,temp.next)
                temp.next = newval
                break
                
            temp = temp.next
            c += 1
        

x = LinkedList()


type(x)

x.insertion_at_beginning(5)
x.insertion_at_beginning(10)
x.insertion_at_beginning(50)
x.insertion_at_end(79)
x.insertion_at_beginning(1)
y = x.print()

print(y)

y

type(y)


x.delete_at_index(2)
print(x.print())



f = LinkedList()
f.insert_values([85,"sunny","panchal",32])
f.insertion_at_beginning(987)
print(f.print())


print(f.get_length())

f.insertion_at_end("Khushi")

print(f.get_length())
print(f.print())

print(f.print())

print(f.print())



f.insertion_at_index(5,"asdasd")
print(f.print())

f.insertion_at_index(2,987)
print(f.print())

f.delete_at_index(3)
f.delete_at_index(4)

print(f.print())

f.delete_at_index(5)
f.delete_at_index(4)

print(f.print())



